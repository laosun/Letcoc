<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');/** * _P Class. *  * PHP Version 5.3.9 *  * @name   		_P Class * @package		Letcoc * @author 		Aleksei Zhulitov * @title  		Набор плюшек для PHP кодера кода. *  * @info   		Для получения справки по классу, выполните: <code>_P::DOC();</code> *  * @example		[Образец класса для запуска примеров] * <pre> *	class some{ *		public $param	 = array(); *		public $param_ll = "someValue";  *		/** *		 * Some Method test *		 * ... *		 * / *		function test(){} * *		function test_ll(){} *	} *	$class = new some; * </pre> */class _P {		/**	 * Метод выводящий результат Функции `print_r` обрамленный в `pre`.	 * 	 * @example	<code>_P::P( $you_variable );</code>	 * 	 * @access	public	 * @param	any		$var	[Переменная, информация о которой будет выведена]	 * @param	string|bool	$title	[string - Заголовок выходящий в начале контейнера с инфой;	 *       	           	      	bool - `FALSE` не выводить заголовок ]	 * 	 * @param	bool		$var	[TRUE  - тэг `pre` будет позиционирован абсолютно]	 * @param	bool		$return	[TRUE  - вернет без `pre`; FALSE - выведет в браузер ]	 * @return	void	 */	public static function P( $var = "", $title = "Информация", $onTop = FALSE, $return = FALSE )	{		$onTop	= ( $onTop ) ? "position:absolute;z-index:999999;" : "";		if( !$return )			echo "<pre style='{$onTop}border:1px dotted red;padding:10px; background:#FFC; color:#000;'>";					$buffer	 = "";		if ( !is_bool( $title ) and $title !== FALSE )			$buffer	.= print_r( "<h4 style='color:blue;'> :: {$title} :: </h4>", $return );		$buffer	.= print_r( $var, $return );				if( !$return )			echo "</pre>";				if( $return ) return $buffer;	}			/**	 * Метод выводящий список методов переданного аргументом класса.	 * 	 * @example	<code>_P::CM( $class );</code>	 * 	 * @access	public	 * @param	object	$class	[класс, методы которого нужно вывести.]	 * @return	void	 */	public static function CM ( $class = "" )	{		if( !is_object( $class ) ) return;		self::P(			get_class_methods( $class ),			"Методы класса - " . get_class( $class )		);	}			/**	 * Метод выводящий список параметров	 * переданного аргументом класса или объекта.	 * 	 * @example	<code>_P::CV( $class );</code>	 * 	 * @access	public	 * @param	object	$class	[класс, параметры которого нужно вывести.]	 * @return	void	 */	public static function CV ( $class = "" )	{		if( !is_object( $class ) ) return;		self::P(			get_object_vars( $class ), 			"Параметры класса - " . get_class( $class )		);	}			/**	 * Метод выводящий список параметров	 * переданного аргументом класса или объекта.	 * 	 * Выводит информацию только о тех параметрах,	 * значения которых не являются другими классами.	 *	 * @example	<code>_P::COV( $class );</code>	 *	 * @access	public	 * @param	object	$class	[класс, параметры которого нужно вывести.]	 * @return	void	 */	public static function COV( $class = "" )	{		if( !is_object( $class ) ) return;					$BUFF				=	new stdClass;		foreach( $class as $name => $value )		{			if( is_object( $value ) and get_class( $value ) != "stdClass" )				continue;			$BUFF->$name	= $value;		}		self::P(			$BUFF,			"Методы класса - " . get_class( $class )		);	}				/**	 * Метод выводит информацию о всех определенных ранее константах.	 * 	 * @example	<code>_P::DC();</code>	 * 	 * @access	public	 * @return	void	 */	public static function DC ()	{		self::P(			get_defined_constants(),			"Информация о константах"		);	}			/**	 * Метод выводит информацию о файлах которые ранее были подключены	 * через: include; include_once; require; require_once;	 * 	 * @example	<code>_P::_IF();</code>	 * 	 * @access	public	 * @return	void	 */	public static function _IF ()	{		self::P(			get_included_files(),			"Информация о подключеных файлах"		);	}				/**	 * Метод выводит документацию по указанному классу.	 * 	 * @example_1	 *	<pre>	 *		class some{	 *			/**	 *			 * Some Method	 *			 * ...	 *			 * /	 *			function test(){}	 *		}		 *		$class	= new some;	 *		_P::DOC( $class );	 *	</pre>	 * 	 * @access	public	 * @param	object	$class	[object - класс по которому нужно вывести инфу; NULL - выводит информацию о классе `плюшек`]	 * @return	void	 */	public static function DOC( $class = NULL )	{		if ( is_null( $class ) or !is_object( $class ) or get_class( $class ) == "stdClass" )		{			$class	= new _P;		}				if ( !function_exists(	"_Parse_DOC" ) )		{			function _Parse_DOC ( $DOC ) {				if ( strlen( $DOC ) < 10 )					return "/**\r * Документация отсутствует ):\r */";										$DOC	= mb_ereg_replace( "[\r\n]+\t+", "\r", $DOC );				$DOC	= mb_ereg_replace( "[\r\n]+[\t *]+<", "\r<", $DOC );								$DOC	= mb_ereg_replace( "//([\w]+)([\r\n]+)", "<span style='color:#11AAAA;'>//\\1</span>\\2", $DOC );								$DOC	= mb_ereg_replace(							"([\r\n]+[\t *]+)(@{1}[\w]+)",							"\\1<span style='color:#090; font-weight:bold;'>\\2</span>",							$DOC						);								$_DOC	= "";				foreach( split( "[\n\r]{1,2}", $DOC ) as $str )				{					$str = mb_ereg_replace( "^([\t ]*)/?\*+/?", "\\1", $str );					$str = mb_ereg_replace( "^ +", "", $str );					$str = mb_ereg_replace( "\[([\w\W]+)\]", "[<i>\\1</i>]", $str );					$str = mb_ereg_replace( "\[([\w\W]+)", "[<i>\\1", $str );					$_DOC .= mb_ereg_replace( "(\S)([\w\W]+)\]", "\\1\\2</i>]", $str ) . PHP_EOL;				}				$DOC	= $_DOC;						$DOC	= str_replace( "<pre>", "<pre style='display:block;color:red;margin: 0 0 -15 0'>", $DOC );				$DOC	= str_replace( "<code>", "<code style='color:red;'>", $DOC );				$DOC	.= "<hr size=4 noshade>\r";				return $DOC;			}		}				$RETURN	= "";				$_Reflection		= new ReflectionClass( $class );				$DocComment			= _Parse_DOC ( $_Reflection->getDocComment() );				$RETURN	.= _P::P( $DocComment, "Информация о class " . get_class( $class ) . "{}", FALSE, TRUE );				foreach ( $_Reflection->getMethods() as $method )		{			$DocComment	=	_Parse_DOC( $_Reflection->getMethod( $method->name )->getDocComment() );			$RETURN	.= _P::P(							$DocComment,							"Информация о методе `{$method->name}` класса `{$method->class}`",							FALSE, TRUE						) ;		}				_P::P( $RETURN, FALSE );	}}/* End of file _P.php *//* Location: ./application/libraries/Letcoc_extends/_P.php */